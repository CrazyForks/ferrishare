services:
  # The FerriShare service (includes frontend, backend and database)
  ferrishare:
    # If you'd like to build FerriShare from source,
    # clone the repository and run 'docker compose build'.
    build: .
    # Otherwise, you can simply pull the prebuilt image from the
    # GitHub Container Registry by invoking 'docker compose pull'.
    image: ghcr.io/tobiasmarschner/ferrishare:latest
    # Give the container a recognizable name, makes management easier.
    container_name: ferrishare
    restart: unless-stopped
    # All data for FerriShare resides in the '/app/data'-directory.
    # This includes:
    #   config.toml       => Configuration generated by '--init'-flag
    #   user_templates/*  => User-configurable templates
    #   sqlite.db         => Application database
    #   uploaded_files/*  => Encrypted files uploaded by users
    volumes:
      - "./data:/app/data"
    # This tells Traefik to make the `ferrishare` service accessible on localhost.
    # Refer to Traefik's documentation for more details on how to label and route services.
    labels:
      - "traefik.http.routers.fileshare.rule=Host(`localhost`)"
  # The required reverse-proxy (refer to README for more details on why)
  # In this example we're using Traefik, but any reverse-proxy works.
  reverse-proxy:
    image: traefik
    container_name: traefik
    restart: unless-stopped
    # Launch the reverse-proxy only after FerriShare is ready.
    depends_on:
      - ferrishare
    # Tells Traefik to automatically check Docker containers' labels.
    command:
      - "--providers.docker"
    # Bind's Traefik's default 'web' port (80) to port 3000 of the host machine.
    ports:
      - 3000:80
    # You have to pass through the docker socket so that Traefik can read the metadata
    # of the running `ferrishare` container and automatically establish the routes.
    volumes:
      # Rootful mode (default):
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      # Rootless mode:
      # - "/run/user/1000/docker.sock:/var/run/docker.sock:ro"
